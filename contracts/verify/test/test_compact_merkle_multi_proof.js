const {expect, use} = require('chai');
const { solidity }  = require("ethereum-waffle");

use(solidity);

describe('CompactMerkleProofTest', function () {
    let SimpleMerkleProofTest;

    before(async () => {
      CompactMerkleProofTest = await ethers.getContractFactory("CompactMerkleProofTest");
      compactMerkleProofTest = await CompactMerkleProofTest.deploy();
      await compactMerkleProofTest.deployed();
    });

    it('Small multi compact trie merkle proof', async () => {
      let root = "0xc91f159b4aafb358bc0c53515f1b973a39eb4569ece5b392b9ad994fd465f26b";        
      let proof = ["0x81001101803a0d2f90c601ee639b52002350659efd5d4e98a293e64729eb6f54e890cbb9880000", "0x4000", "0x4000"]
      let keys = ["0x04", "0x08"]
      let values = ["0x04fe6b333420b90689158643ccad94e62d707de1a80726d53aa04657fec14afd3e441e67f48e61b4e67b4c4ab17713c0737abe7ddad63bb97b1138302e1a776723", "0x048c49b70d152e7f9bfbfc4a7c53fb13d8855dbc221e68f7ef734f0af394d86bf1a3b28bf6c6fd814ed8772e41e7a19c2bfc261bff67b46e065d2767a547079139"]
      await compactMerkleProofTest.testCompactVerify(root, proof, keys, values)
    })

    it('Large multi leaves compact trie merkle proof', async () => {
      let root = "0x028bae9546811ee6d981c797be32c74b9c76c63c7fac0af8d01f97b66fdcaa85";        
      let proof = [
        "0x80ffff00000080486cdffd9fa95e7e8ae49790b1b3ceb252c4d8c0e60894df7e5ea2439786bd3d80967c09f7e4588c738f8ae7238d12d554706adaafdc88648f4e9689a6fa3cf31580a40f6c246aea3c0750d39fc6a39dd810cfd744a363a10d17d783b8eee4d21e8b806ffbf5ede2c4eb2001a3cc209dc2ec433e336474c30057636151cd0dcaa033ce80a07b6a1af0611b27e4d76716ea9f23e843280f0e8d42ceda6ec69eb3a32cf461000080f2e86f008b8f7e8cb8f1cf2903dca25208f3ee99c6b275810f960eb696cbc8198084d39c430c057f56ae6a9fec50f34e1c0f7a438766042d58ec0f6f40c48cda1c8079eb719cc05416732d15c63a1cc74cf53183f864928beb3fd5b7f4c162cc0eec805cf6dacf5877bf03267932feb30bfff655ca2857c228e139452fce874953db4780706505a81088b5b26f012c12b7486c04e8f4775de0873c777af10cd266f0711b800123b84b070a5bf0b3df9bed137b409cc82a3a0c74ea2e8afc6e9edd6615eb28",
        "0x803333803a0d2f90c601ee639b52002350659efd5d4e98a293e64729eb6f54e890cbb98880d0e06878c6f7193c58d613c58b9de563eba38d43d6ea4e0a42d4ca30fb07b859800c851a81b2d4d5bb0bb959dbfeb21cf3f475ac5be781caed6fe7fc73723b69dc803c29b91ce1613e718043c64a5c914e6f7da6fc3a793f38b681f8eb9ee88cecbd008024a44b91086ec9ee9bf0c78d2cdf3c13ef833036977062d8a864b1fdafb31c38803a0d2f90c601ee639b52002350659efd5d4e98a293e64729eb6f54e890cbb98880f1b05c9e295368ecf36ac0d7c11ad570d6f9ab96767e00c7203162fbe2b9672c",
        "0x4000",
        "0x803333008032445cb933fb2b56309839f1128f127ab59b83e5433a64d56f71b1d73ff443940080feb33f97da03e2d7302f36d8ca53761b870eb99b27e2718b67744db36e2fb59b00804fa4b3cf90718cd983473a1598c4338af2789e11aa703df1733cf0f26d30a85500808b81de35909bf3a26061c33a13760f152404c075e0989f3cd8579d0c26a4eca2",
        "0x4000",
        "0x4000",
        "0x4000",
        "0x4000",
        "0x803333008053a4538d3bdbe23c6e51f85fdf1f8bcf39c6a7ba761ee172b6b5feef3ca6abfb809f7038c93cfb99bb5c8f1e550c107f61dbc032d75a905f367d63577d89ae6f2e8078a0c3ec2b11bee0cc29bf95f4c99a7c82241bfadd9dd46ac9a967787c08d0fd807795f66fcca99189f1bc755bab8784d56ac2a3ee08944dc9812543d884367cea80149634817286e2100863aa8993e63410f3d81031d247fde55efc8dcdb0fc3518804ad8de38c8565cca9ac0ec4634ee5f23ff31b3092cde7d86a507cfefe93b199380f3a2605ee63bd1e068b9502826f490cb591135530625eeda35875100a997d40a",
        "0x4000",
        "0x80333380ed6bc371eb5cc90a6f0427ee952cca3dfdcb31503493f237658084d82a55a660802fc65ec0ce623ce9413b4a6aa6d5116493014ab8bad34e26bd1095d9337a9289809ef9fb5c084495e49f3bdab4dcd5a1cce502c97a2be7c891435a6e6bce6262f8805f7b4e33fe7f7c69e112b989f142343d91a3b0df15d1136715361959bbabab9000807414318549bca4d43f381d9eac6fa417d4f4124bc9f25df12941483f089c4aa780b3f748f083eb817cc014f827797898e43002b8c75491a216e4222eaf0d87892e80fa1023f770c4010bf5a994edab79edb4c297d38a56f843a537a33f470fbb4cc2",
        "0x4000",
        "0x803333008084d0a6088b1c90305b89860fa67c0ea1ea83a9f4a5235b9f3781270641543ddd00809435b8242e20e475b2cfcc783e6483201d4ec0364fa7f761fd5f607428557808008002ffedf030b506d66e9fcda108f0f63ebeabb0c3c1495fb08c497f8c2561777f80b81f1b9589deba6a1a4dd8523012db367591c2a63b2e11e465dc722426b01f9d8041e79ef38959cddf7a754a6c9cfb7d75b0cb32dc4d7e375e39a900a5b6bf72f3",
        "0x4000",
        "0x4000",
        "0x4000",
      ];

      let keys = [
        "0x08",
        "0x10",
        "0x14",
        "0x18",
        "0x1c",
        "0x20",
        "0x88",
        "0x90",
        "0x94",
        "0x98",
      ];

      let values = [
        "0x048c49b70d152e7f9bfbfc4a7c53fb13d8855dbc221e68f7ef734f0af394d86bf1a3b28bf6c6fd814ed8772e41e7a19c2bfc261bff67b46e065d2767a547079139",
        "0x04fe6b333420b90689158643ccad94e62d707de1a80726d53aa04657fec14afd3e441e67f48e61b4e67b4c4ab17713c0737abe7ddad63bb97b1138302e1a776723",
        "0x04278cf2d03cd5ebf57274db80ecb7b5633186af48d50d8da8def452cedb1994da22f6b322a4452d9b0f427a1df4870165d072adfb95562c0c81ad51da813b5e77",
        "0x04f7eac08542f15db112bc8404180d415083c7cfce7a2e2e4eff6cdf6054eef3c96462eb14bcb5f6d06550520f0f6daca44f1053144697c6d858112fd4b2767db6",
        "0x04fba7e614d298fc26a2528762c97d1308bc8903448f380117cfb6ce42fd89524d7ce2d9dc091ee5618fba57c798b353f862c47d4cdcba002742aac294cf79e03a",
        "0x0429b6dce9463628914df7ef53d9e6c9096b11540562d027686e16afe6ef5c574ae825c3c5a13f05767d25e9453a7f87cffa62750f5a0e29222425d47d2d9b4dc5",
        "0x04cb508560367d4de61e718cfcbf8e400516726b79ebe194b2718acb454904d61c365aea14374a54d24c3a9d4b2192a9ab7f1c5648b4e0ce64f6b7c0228c1da08c",
        "0x045b7a14b17cb7098155b1c74eacca3caebda7cfc30ec41b829d86e3f93cf09996787734c37f4259d62036b5a6f86fcc2f10e672ce540e15a786ca2260e1180d11",
        "0x04092cdd073ab383f1e54ca939b5bceb624144e661f0d96b1fae59fc75fd1da93ae7c687ff830f15307cc179f87e81b6f4a79a5f95d6c60757381dee738f93f9ec",
        "0x04fd36d61255ac5f0fa9ff702612a0fa5f14b2d1933b81d3bf5f124bed9a89ea2da7c154ae99c6d7f072305f915b735e02c0d784c57f3e08940baa214b9f3b9955",
      ];

      await compactMerkleProofTest.testCompactVerify(root, proof, keys, values)
    })

});
